var child_process = require("child_process");
var Promise = require("bluebird");
var las = require("linux-audio-state");
var lsusb = require("lsusbdev");
var lvs = require("linux-video-state");
var netw = require("netw");
var diskinfo = require("diskinfo");
var exec = child_process.exec;
module.exports = function () {
    return new Promise(function (resolve, reject) {
        var object = {};
        object.updatedAt = new Date().getTime();
        object.audio = {};
        object.video = {};
        var callbacked = false;
        var timo = setTimeout(function () {
            if (!callbacked) {
                console.log("timeout bootId read timeout");
                reject("timeout");
            }
        }, 10000);
        exec("cat /proc/sys/kernel/random/boot_id", { timeout: 9000 }, function (error, stdout, stderr) {
            if (error != null) {
                callbacked = true;
                clearTimeout(timo);
                reject(error);
            }
            else if (stderr && stderr != null) {
                callbacked = true;
                clearTimeout(timo);
                reject(stderr);
            }
            else {
                callbacked = true;
                clearTimeout(timo);
                var callbacked2 = false;
                var timo2 = setTimeout(function () {
                    if (!callbacked2) {
                        console.log("timeout bootTime read timeout");
                        reject("timeout");
                    }
                }, 10000);
                object.bootId = stdout.toString("utf-8");
                exec("cat /proc/stat | grep btime | awk '{ print $2 }'", { timeout: 9000 }, function (error, stdout, stderr) {
                    if (error != null) {
                        callbacked2 = true;
                        clearTimeout(timo2);
                        reject(error);
                    }
                    else if (stderr && stderr != null) {
                        callbacked2 = true;
                        clearTimeout(timo2);
                        reject(stderr);
                    }
                    else {
                        callbacked2 = true;
                        clearTimeout(timo2);
                        object.bootTime = parseInt(stdout.toString("utf-8")) * 1000;
                        lsusb().then(function (data) {
                            object.usbDevices = data;
                            diskinfo.getDrives(function (err, aDrives) {
                                object.drives = aDrives;
                                netw().then(function (data) {
                                    object.networks = data;
                                    las().then(function (data) {
                                        object.audio.inputs = data;
                                        lvs().then(function (data) {
                                            object.video.inputs = data;
                                            resolve(object);
                                        }).catch(function (err) {
                                            console.log(err);
                                            resolve(object);
                                        });
                                    }).catch(function (err) {
                                        lvs().then(function (data) {
                                            object.video.inputs = data;
                                            resolve(object);
                                        }).catch(function (err) {
                                            console.log(err);
                                            resolve(object);
                                        });
                                    });
                                });
                            });
                        });
                    }
                });
            }
        });
    });
};

//# sourceMappingURL=data:application/json;base64,
