"use strict";
var os = require("os");
var child_process = require("child_process");
var Promise = require("bluebird");
var superagent = require("superagent");
var lsusbdev_1 = require("lsusbdev");
var linux_cpu_temp_1 = require("linux-cpu-temp");
var networkstatus_1 = require("networkstatus");
var lsdisks = require("ls-disks");
var exec = child_process.exec;
function getExternalIp() {
    return new Promise(function (resolve, reject) {
        superagent.get('https://api.ipify.org?format=json').end(function (err, res) {
            if (err) {
                reject(err);
            }
            else {
                resolve(res.body.ip);
            }
        });
    });
}
function sysinfo() {
    return new Promise(function (resolve, reject) {
        var object = {};
        object.updatedAt = new Date().getTime();
        var callbacked = false;
        var timo = setTimeout(function () {
            if (!callbacked) {
                console.log("timeout bootId read timeout");
                reject("timeout");
            }
        }, 10000);
        object.system = {
            loadavg: os.loadavg(),
            freemem: os.freemem(),
            totalmem: os.totalmem(),
            release: os.release(),
            arch: os.arch(),
            ostype: os.type(),
            platform: os.platform(),
            cores: os.loadavg().length
        };
        exec("cat /proc/sys/kernel/random/boot_id", { timeout: 9000 }, function (error, stdout, stderr) {
            if (error != null) {
                callbacked = true;
                clearTimeout(timo);
                reject(error);
            }
            else if (stderr && stderr != null) {
                callbacked = true;
                clearTimeout(timo);
                reject(stderr);
            }
            else {
                callbacked = true;
                clearTimeout(timo);
                var callbacked2_1 = false;
                var timo2_1 = setTimeout(function () {
                    if (!callbacked2_1) {
                        console.log("timeout bootTime read timeout");
                        reject("timeout");
                    }
                }, 10000);
                object.bootId = stdout.toString().replace("\n", "");
                exec("cat /proc/stat | grep btime | awk '{ print $2 }'", { timeout: 9000 }, function (error, stdout, stderr) {
                    if (error != null) {
                        callbacked2_1 = true;
                        clearTimeout(timo2_1);
                        reject(error);
                    }
                    else if (stderr && stderr != null) {
                        callbacked2_1 = true;
                        clearTimeout(timo2_1);
                        reject(stderr);
                    }
                    else {
                        callbacked2_1 = true;
                        clearTimeout(timo2_1);
                        object.bootTime = parseInt(stdout.toString()) * 1000;
                        lsusbdev_1.default().then(function (data) {
                            object.usbDevices = data;
                            object.drives = lsdisks.all();
                            networkstatus_1.default().then(function (data) {
                                object.networks = data.networks;
                                object.network = data.network;
                                if (object.network) {
                                    object.network.externalIp = '';
                                }
                                linux_cpu_temp_1.default().then(function (a) {
                                    object.cputemp = a;
                                    if (object.network) {
                                        getExternalIp().then(function (a) {
                                            object.network.externalIp = a;
                                            resolve(object);
                                        }).catch(function () {
                                            resolve(object);
                                        });
                                    }
                                    else {
                                        resolve(object);
                                    }
                                }).catch(function (err) {
                                    if (object.network) {
                                        getExternalIp().then(function (a) {
                                            object.network.externalIp = a;
                                            resolve(object);
                                        }).catch(function () {
                                            resolve(object);
                                        });
                                    }
                                    else {
                                        resolve(object);
                                    }
                                });
                            });
                        });
                    }
                });
            }
        });
    });
}
exports.sysinfo = sysinfo;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
